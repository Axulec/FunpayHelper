import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from dotenv import load_dotenv
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ACCESS_CODE = os.getenv("ACCESS_CODE")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in environment (.env). Please add your bot token to .env as BOT_TOKEN=...")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
authorized_users = set()
# active_reminders: maps user_id -> datetime of next reminder OR True when active without scheduled job yet
active_reminders = {}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder(user_id: int):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –Ω–µ —à–ª—ë–º
    if user_id not in active_reminders:
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥–Ω—è–ª ‚úÖ", callback_data="upproduct"),
                InlineKeyboardButton(text="–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ùå", callback_data="stoptask")
            ]
        ]
    )
    try:
        await bot.send_message(user_id, "üìä –ü–æ–¥–Ω–∏–º–∏—Ç–µ —Ç–æ–≤–∞—Ä üî•", reply_markup=keyboard)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def schedule_next_reminder(user_id: int, hours: int = 4):
    job_id = f"reminder_{user_id}"
    next_time = datetime.now() + timedelta(hours=hours)
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
    scheduler.add_job(
        send_reminder,
        DateTrigger(run_date=next_time),
        args=[user_id],
        id=job_id,
        replace_existing=True
    )
    active_reminders[user_id] = next_time
    logging.info("Scheduled next reminder for %s at %s", user_id, next_time)

# --- –û—Ç–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def cancel_reminder(user_id: int):
    job_id = f"reminder_{user_id}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    active_reminders.pop(user_id, None)
    logging.info("Cancelled reminders for %s", user_id)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—Éüîí")
        return
    await show_start_button(message)

# --- –ö–æ–º–∞–Ω–¥—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∞–º (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞) ---
@dp.message(commands=["gototask"])
async def cmd_gototask(message: types.Message):
    # –ü–æ–≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "–î–∞ ‚úÖ"
    await show_start_button(message)
    # User will press the button to actually start

@dp.message(commands=["upproduct"])
async def cmd_upproduct(message: types.Message):
    # –ü–æ–≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ "–ü–æ–¥–Ω—è–ª ‚úÖ"
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–¥-–ø–∞—Ä–æ–ª—å.")
        return
    schedule_next_reminder(user_id)
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –ø–æ–¥–Ω—è—Ç! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")

@dp.message(commands=["stoptask"])
async def cmd_stoptask(message: types.Message):
    # –ü–æ–≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ùå"
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–¥-–ø–∞—Ä–æ–ª—å.")
        return
    cancel_reminder(user_id)
    await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–Ω–µ–º?üëΩ' ‚Üí –î–∞ ‚úÖ")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç) ---
@dp.message()
async def check_code(message: types.Message):
    user_id = message.from_user.id
    text = (message.text or "").strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if user_id in authorized_users:
        return
    if not ACCESS_CODE:
        await message.answer("–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –∑–∞–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ACCESS_CODE.")
        return
    if text == ACCESS_CODE:
        authorized_users.add(user_id)
        await message.answer("–£—Å–ø–µ—à–Ω–æ‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–ºüìä")
        await show_start_button(message)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–Ω–µ–º?üëΩ" ---
async def show_start_button(message_or_callback):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="gototask")]
        ]
    )
    # message_or_callback –º–æ–∂–µ—Ç –±—ã—Ç—å types.Message –∏–ª–∏ types.CallbackQuery
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer("–ù–∞—á–Ω–µ–º?üëΩ", reply_markup=keyboard)
    else:
        # CallbackQuery
        await message_or_callback.message.answer("–ù–∞—á–Ω–µ–º?üëΩ", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞ ‚úÖ" ---
@dp.callback_query(F.data == "gototask")
async def cb_gototask(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in authorized_users:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å.")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—Éüîí")
        return
    # –í–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
    schedule_next_reminder(user_id)
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")
    try:
        await callback.message.edit_text("üïí –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")
    except Exception:
        pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–Ω—è–ª ‚úÖ" ---
@dp.callback_query(F.data == "upproduct")
async def cb_upproduct(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in authorized_users:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å.")
        return
    schedule_next_reminder(user_id)
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ ‚è∞")
    try:
        await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä –ø–æ–¥–Ω—è—Ç! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")
    except Exception:
        pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ùå" ---
@dp.callback_query(F.data == "stoptask")
async def cb_stoptask(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in authorized_users:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å.")
        return
    cancel_reminder(user_id)
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    try:
        await callback.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception:
        pass
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–Ω–µ–º?üëΩ" —Å–Ω–æ–≤–∞
    await show_start_button(callback)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    scheduler.start()
    logging.info("Scheduler started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
